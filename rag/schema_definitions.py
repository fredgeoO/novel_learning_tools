# inputs/rag/schema_definitions.py
"""
定义用于 LLMGraphTransformer 的叙事元素和关系类型常量。
这些列表用于约束模型的输出，使其专注于特定的叙事分析任务。
"""

# --- 基础元素 ---
BASIC_ELEMENTS = [
    # --- 核心实体 ---
    "人物",  # 故事或系统中的独立个体（如人物、AI角色），通常包含姓名、性别、年龄等属性。例如：`张三`、`机器人A`。
    "地点",  # 物理或虚拟空间位置（如城市、房间、星球），可关联地理坐标、描述等属性。例如：`北京`、`实验室`。
    "组织",  # 由多人组成的机构或团体（如公司、政府、帮派），通常包含成员、成立时间、宗旨等属性。例如：`联合国`、`黑帮组织`。
    "物品",  # 具体存在的物体（如武器、道具、书籍），可能有材质、用途、所属者等属性。例如：`AK-47`、`魔法书`。

    # --- 核心事件与行为 ---
    "事件",  # 发生的具体事态或动作（如战争、会议、生日），通常关联时间、地点、参与者等属性。例如：`诺曼底登陆`、`公司发布会`。
    "对白",  # 角色之间的对话内容（文本节点），通常关联说话者和接收者。例如：`"你在哪里？"`、`"任务完成"`。
    "想法",  # 角色的内心活动或思考（抽象实体），关联角色和具体想法内容。例如：`"必须阻止计划"`、`"感到不安"`。

    # --- 状态与概念 ---
    "情绪",  # 角色当前的情感状态（如愤怒、喜悦），通常关联角色和情绪强度。例如：`"愤怒值=90%"`、`"悲伤"`。
    "状态",  # 角色或事物的当前状况（如健康、损坏、隐身），可描述动态变化。例如：`"重伤"`、`"电量10%"`。
    "时间",  # 具体时间点或时间段（如2023年、上午10点），用于事件的时间属性。例如：`"2023-10-01"`、`"凌晨3点"`。

    # --- 抽象但关键 ---
    "原因",  # 导致事件发生的根本因素（抽象实体），连接到结果事件。例如：`"病毒泄漏"` → 导致`"城市封锁"`。
    "行动",  # 角色执行的具体动作（如奔跑、攻击），通常关联角色和动作类型。例如：`"开枪"`、`"逃跑"`。
    "结果",  # 事件导致的后果（抽象实体），连接到原因事件。例如：`"胜利"`、`"伤亡惨重"`。
]

# --- 基础关系 ---
BASIC_RELATIONSHIPS = [
    # --- 行为与表达 ---
    "说出",  # 角色 → 对白，表示角色说出的具体内容。
    # 例：`角色:张三` → `说出` → `对白:"快跑！"`。
    "产生",  # 角色 → 想法，表示角色主动生成的内心活动。
    # 例：`角色:李四` → `产生` → `想法:"必须救她"`。
    "经历",  # 角色 → 事件，表示角色亲身参与或遭遇的事件。
    # 例：`角色:王五` → `经历` → `事件:车祸`。
    "处于",  # 实体 → 状态，表示实体当前所处的状况（可扩展至物品、角色等）。
    # 例：`物品:手机` → `处于` → `状态:低电量`。

    # --- 位置与归属 ---
    "位于",  # 实体 → 地点，表示实体所处的物理/虚拟位置（包括角色、物品、事件）。
    # 例：`角色:张三` → `位于` → `地点:咖啡馆`；`事件:会议` → `位于` → `地点:会议室`。
    "属于",  # 角色 → 组织（角色归属机构） 或 概念 → 体系（概念归属理论体系）。
    # 例：`角色:张三` → `属于` → `组织:警察局`；`概念:相对论` → `属于` → `体系:物理学`。
    "拥有",  # 角色 → 物品，表示角色对物品的控制权或所有权。
    # 例：`角色:张三` → `拥有` → `物品:手枪`。

    # --- 时间与顺序 ---
    "发生在",  # 事件 → 时间，表示事件发生的具体时间点。
    # 例：`事件:战争爆发` → `发生在` → `时间:2023-01-01`。

    # --- 因果与驱动 ---
    "导致",  # 原因 → 结果，表示因果关系（原因直接引发结果）。
    # 例：`原因:暴雨` → `导致` → `结果:洪水`。
    "执行",  # 角色 → 行动，表示角色主动发起的动作。
    # 例：`角色:张三` → `执行` → `行动:开枪`。
]

# --- 基础Schema ---
BASIC_SCHEMA = {
    "name": "基础",
    "description": "具体且精简的叙事元素和关系",
    "elements": BASIC_ELEMENTS,
    "relationships": BASIC_RELATIONSHIPS,
}

# --- 最小化元素 ---
MINIMAL_ELEMENTS = [
    "人物",  # 所有角色
    "地点",  # 所有位置
    "时间",  # 发生时间
    "事件",  # 发生事件
    "物件"
]

# --- 最小化关系 ---
MINIMAL_RELATIONSHIPS = [
    "位于",  # 位置关系
    "发生在",  # 时间关系
    "参与",  # 参与关系
    "导致",  # 因果关系
    "涉及"
]

# --- 最小化Schema ---
MINIMAL_SCHEMA = {
    "name": "极简",
    "description": "最精简的叙事元素和关系",
    "elements": MINIMAL_ELEMENTS,
    "relationships": MINIMAL_RELATIONSHIPS,
}

# --- 情节元素 ---
PLOT_ELEMENTS = [
    "人物",  # 所有角色
    "地点",  # 所有位置
    "时间",  # 发生时间
    "事件",  # 发生事件
    "状态"  # 角色或事物的当前状况
]

# --- 情节关系 ---
PLOT_RELATIONSHIPS = [
    # 人物-地点关系
    "位于",  # 人物-地点，如"张三位于咖啡馆"
    "前往",  # 人物-地点，如"张三前往老宅"

    # 人物-事件关系
    "参与",  # 人物-事件，如"张三参与发现信件"

    # 人物-状态关系
    "处于",  # 人物-状态，如"张三处于紧张状态"

    # 事件-时间关系
    "发生在",  # 事件-时间，如"发现信件发生在上午10点"
    "持续",  # 事件-时间，如"调查持续了2小时"

    # 事件-事件关系
    "导致",  # 事件-事件，如"发现信件导致决定调查"

    # 人物-人物关系
    "敌人",  # 人物-人物，如"张三和李四是敌人"
    "朋友",  # 人物-人物，如"张三和李四是朋友"
    "认识"  # 人物-人物，如"张三认识王五"
]

# --- 情节Schema ---
PLOT_SCHEMA = {
    "name": "情节",
    "description": "专注于故事中的事件、人物行动，故事发展脉络",
    "elements": PLOT_ELEMENTS,
    "relationships": PLOT_RELATIONSHIPS,
}

# =============================================================================
# --- 无约束模式 ---
# =============================================================================

NO_SCHEMA = {
    "name": "无约束",
    "description": "不限制类型，由模型提取所有可能的元素",
    "elements": [],  # 空列表表示无限制
    "relationships": [],  # 空列表表示无限制
    "node_properties": True,  # 允许提取任何节点属性
    "relationship_properties": True  # 允许提取任何关系属性
}

# =============================================================================
# --- 所有可用的Schema集合 ---
# =============================================================================
AUTO_SCHEMA = {
    "name": "自动生成",
    "description": "根据分析内容，结合极简schema来生成新schema",
    "elements": [],
    "relationships": [],
}


# 初始化时添加自动生成的schema占位符
ALL_NARRATIVE_SCHEMAS = {
    "自动生成": AUTO_SCHEMA,  # 默认使用基础schema作为占位符
    "基础": BASIC_SCHEMA,
    "极简": MINIMAL_SCHEMA,
    "情节": PLOT_SCHEMA,
    "无约束": NO_SCHEMA,
}

# --- 默认Schema ---
DEFAULT_SCHEMA = AUTO_SCHEMA
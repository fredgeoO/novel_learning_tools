// graph_ui.js - Áî®Êà∑ÁïåÈù¢„ÄÅ‰∫§‰∫íÂíå‰∏ä‰∏ãÊñáËèúÂçïÁÆ°ÁêÜ

class GraphUI {
    constructor(graphCore) {
        this.graphCore = graphCore; // Ê≥®ÂÖ•Ê†∏ÂøÉÊ®°Âùó
        this._state = {
            contextMenuNode: null,
            contextMenuEdge: null,
            addingNode: false,
            connectingToExisting: false,
            connectionSourceNode: null,
            isConnectingNewNode: false,
            menuShowTimer: null,
            isMenuVisible: false,
            menuScheduledToShow: false,
        };

        this.init();

        window.addEventListener('graphInitialized', (event) => {
        const network = event.detail.network;
        if (network) {
            network.on("click", (params) => this.handleClick(params));
            network.on("doubleClick", (params) => this.handleDoubleClick(params));
            network.on("oncontext", (params) => this.handleContextMenu(params));
            network.on("hold", (params) => this.handleHold(params));
            network.on("release", (params) => this.handleRelease(params));
            console.log('ÁΩëÁªúÂõæ‰∫ã‰ª∂ÁªëÂÆöÊàêÂäü');
        }
    });
    }

    init() {
        this.bindGlobalEvents();
        this.bindButtonEvents();
    }

    // --- ÂÖ®Â±Ä‰∫ã‰ª∂ÁªëÂÆö ---
    bindGlobalEvents() {
        document.addEventListener('click', (e) => {
            const menus = document.querySelectorAll('.context-menu, .input-menu');
            let clickedInsideMenu = false;
            menus.forEach(menu => {
                if (menu.contains(e.target)) {
                    clickedInsideMenu = true;
                }
            });
            if (!clickedInsideMenu && this._state.isMenuVisible) {
                this.hideAllContextMenus();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideAllContextMenus();
                this.cancelMode();
            }
        });
    }

    // --- ÊåâÈíÆ‰∫ã‰ª∂ÁªëÂÆö ---
    bindButtonEvents() {
        setTimeout(() => {
            const buttonConfigs = [
                {id: 'save-graph-btn', handler: () => this.graphCore.saveGraph()},
                {id: 'delete-graph-btn', handler: () => this.graphCore.deleteGraph()},
                {id: 'refresh-graph-btn', handler: () => this.graphCore.refreshGraph()},
                {id: 'export-graph-btn', handler: () => this.graphCore.exportGraph()},
                {id: 'clear-graph-btn', handler: () => this.graphCore.clearGraph()},
            ];

            buttonConfigs.forEach(btnConfig => {
                const element = document.getElementById(btnConfig.id);
                if (element) {
                    this.bindButtonClick(element, btnConfig.handler);
                } else {
                    console.warn(`Êú™ÊâæÂà∞ÊåâÈíÆÂÖÉÁ¥†: ${btnConfig.id}`);
                }
            });

            const physicsToggle = document.getElementById('physicsToggle');
            if (physicsToggle) {
                this.bindToggleChange(physicsToggle, () => this.graphCore.togglePhysics());
            }
        }, 100);
    }

    bindButtonClick(element, handler) {
        if (!element) {
            console.warn('Â∞ùËØïÁªëÂÆöÁÇπÂáª‰∫ã‰ª∂Â§±Ë¥•ÔºöÂÖÉÁ¥†‰∏çÂ≠òÂú®');
            return;
        }
        const newElement = element.cloneNode(true);
        element.parentNode.replaceChild(newElement, element);
        newElement.addEventListener('click', (e) => {
            e.preventDefault();
            try {
                handler();
            } catch (error) {
                console.error(`ÊåâÈíÆ ${element.id} ÁÇπÂáªÂ§ÑÁêÜÂ§±Ë¥•:`, error);
            }
        });
    }

    // --- ‰øÆÊîπÂêé ---
    bindToggleChange(element, handler) {
        if (!element) {
            console.warn('Â∞ùËØïÁªëÂÆöÂèòÊõ¥‰∫ã‰ª∂Â§±Ë¥•ÔºöÂÖÉÁ¥†‰∏çÂ≠òÂú®');
            return;
        }
        const newElement = element.cloneNode(true);
        element.parentNode.replaceChild(newElement, element);
        newElement.addEventListener('change', () => {
            try {
                handler();
            } catch (error) {
                console.error(`${element.id} Â§ÑÁêÜÂ§±Ë¥•:`, error);
            }
        });
    }

    // --- ÁΩëÁªúÂõæ‰∫ã‰ª∂Â§ÑÁêÜÂô® ---
    handleClick(params) {
        this.logDebug(`üñ±Ô∏è ÁÇπÂáª‰∫ã‰ª∂ - ËäÇÁÇπ: ${params.nodes.length}, Ëæπ: ${params.edges.length}`);

        // Â§ÑÁêÜÈ´ò‰∫ÆÈÄªËæë
        if (params.nodes.length > 0) {
            const clickedNodeId = params.nodes[0];
            if (this.graphCore.state.highlightedNode === clickedNodeId) {
                this.graphCore.resetHighlight();
            } else {
                this.graphCore.highlightNodeAndConnections(clickedNodeId);
            }
        } else if (params.edges.length === 0 && this.graphCore.state.highlightedNode) {
            this.graphCore.resetHighlight();
        }

        // Â§ÑÁêÜ‰∏ä‰∏ãÊñáËèúÂçï
        if (this._state.isMenuVisible && params.nodes.length === 0 && params.edges.length === 0) {
            this.hideAllContextMenus();
        }

        // Â§ÑÁêÜ"ËøûÊé•Âà∞Áé∞ÊúâËäÇÁÇπ"Ê®°Âºè
        if (this._state.connectingToExisting && params.nodes.length > 0 && this._state.connectionSourceNode) {
            const targetNodeId = params.nodes[0];
            if (targetNodeId !== this._state.connectionSourceNode) {
                const newEdgeId = `edge_${this._state.connectionSourceNode}_${targetNodeId}_${Date.now()}`;
                this.graphCore.edges.add({
                    id: newEdgeId,
                    from: this._state.connectionSourceNode,
                    to: targetNodeId
                });
                this.logDebug(`ËøûÊé•ËäÇÁÇπ: ${this._state.connectionSourceNode} -> ${targetNodeId}`);
            }
            this.cancelMode();
        }
    }

    handleDoubleClick(params) {
        this.logDebug(`üëÜ ÂèåÂáª‰∫ã‰ª∂ - ËäÇÁÇπ: ${params.nodes.length}, Ëæπ: ${params.edges.length}`);
        if (params.nodes.length > 0) {
            this._state.contextMenuNode = params.nodes[0];
            this.showEditNodeLabelInput();
        } else if (params.edges.length > 0) {
            this._state.contextMenuEdge = params.edges[0];
            this.showEditEdgeLabelInput();
        }
    }

    handleContextMenu(params) {
        params.event.preventDefault();
        this.showContextMenuAtPosition(params);
    }

    handleHold(params) {
        this.logDebug(`‚úã ÈïøÊåâ‰∫ã‰ª∂ - ËäÇÁÇπ: ${params.nodes.length}, Ëæπ: ${params.edges.length}`);
        if (this._state.menuShowTimer) {
            clearTimeout(this._state.menuShowTimer);
        }
        this._state.menuScheduledToShow = true;
        this._state.menuShowTimer = setTimeout(() => {
            this.showContextMenuAtPosition(params);
            this._state.menuScheduledToShow = false;
        }, 100);
    }

    handleRelease(params) {
        this.logDebug(`ÊîæÂºÄ release‰∫ã‰ª∂`);
    }

    showContextMenuAtPosition(params) {
        if (params.nodes.length > 0) {
            this._state.contextMenuNode = params.nodes[0];
            const node = this.graphCore.nodes.get(params.nodes[0]);
            this.logDebug(`üñ±Ô∏è ÁÇπÂáªËäÇÁÇπ: ${node.label} (ID: ${node.id})`);
            this.showNodeContextMenu(params.pointer.DOM);
        } else if (params.edges.length > 0) {
            this._state.contextMenuEdge = params.edges[0];
            const edge = this.graphCore.edges.get(params.edges[0]);
            this.logDebug(`üñ±Ô∏è ÁÇπÂáªËæπ: ${edge.from} -> ${edge.to} (ID: ${edge.id})`);
            this.showEdgeContextMenu(params.pointer.DOM);
        } else {
            this.logDebug("üñ±Ô∏è ÁÇπÂáªÁîªÂ∏ÉÁ©∫ÁôΩÂ§Ñ");
            this.hideAllContextMenus();
        }
    }

    // --- ‰∏ä‰∏ãÊñáËèúÂçïÊòæÁ§∫ ---
    showNodeContextMenu(domPos) {
        this.hideAllContextMenus();
        const menu = document.getElementById('nodeContextMenu');
        if (this._state.contextMenuNode) {
            const node = this.graphCore.nodes.get(this._state.contextMenuNode);
            const ul = menu.querySelector('ul');
            const titleElement = document.createElement('li');
            titleElement.className = 'menu-title';
            titleElement.textContent = `ËäÇÁÇπ: ${node.label || 'Êú™ÂëΩÂêç'}`;
            titleElement.style.cssText = 'font-weight: bold; background: #555; font-size: 15px; pointer-events: none; padding: 8px 12px;';
            ul.insertBefore(titleElement, ul.firstChild);
        }
        menu.style.display = 'block';
        this.positionContextMenu(menu, domPos);
        this._state.isMenuVisible = true;
    }

    showEdgeContextMenu(domPos) {
        this.hideAllContextMenus();
        const menu = document.getElementById('edgeContextMenu');
        if (this._state.contextMenuEdge) {
            const edge = this.graphCore.edges.get(this._state.contextMenuEdge);
            const fromNode = this.graphCore.nodes.get(edge.from);
            const toNode = this.graphCore.nodes.get(edge.to);
            const ul = menu.querySelector('ul');
            const titleElement = document.createElement('li');
            titleElement.className = 'menu-title';
            titleElement.textContent = `ËøûÊé•: ${fromNode.label || fromNode.id} ‚Üí ${toNode.label || toNode.id}`;
            titleElement.style.cssText = 'font-weight: bold; background: #f0f0f0; pointer-events: none; padding: 8px 12px;';
            ul.insertBefore(titleElement, ul.firstChild);
        }
        menu.style.display = 'block';
        this.positionContextMenu(menu, domPos);
        this._state.isMenuVisible = true;
    }

    showCreateNodeInput() {
        this.hideAllContextMenus();
        const menu = document.getElementById('createNodeInput');
        const input = document.getElementById('newNodeLabel');
        input.value = "Êñ∞ËäÇÁÇπ";
        if (this._state.contextMenuNode) {
            const node = this.graphCore.nodes.get(this._state.contextMenuNode);
            const titleDiv = menu.querySelector('div:first-child');
            if (titleDiv) {
                titleDiv.textContent = `‰ªéËäÇÁÇπ "${node.label || node.id}" ÂàõÂª∫Êñ∞ËäÇÁÇπ`;
                titleDiv.style.fontWeight = 'bold';
            }
        }
        menu.style.display = 'block';
        this.positionContextMenu(menu, {x: event.clientX, y: event.clientY});
        input.focus();
        this._state.isConnectingNewNode = true;
        this._state.isMenuVisible = true;
    }

    showEditNodeLabelInput() {
        if (this._state.contextMenuNode) {
            this.hideAllContextMenus();
            const menu = document.getElementById('editNodeLabelInput');
            const input = document.getElementById('editNodeLabelText');
            const node = this.graphCore.nodes.get(this._state.contextMenuNode);
            input.value = node.label || "";
            const titleDiv = menu.querySelector('div:first-child');
            if (titleDiv) {
                titleDiv.textContent = `ÁºñËæëËäÇÁÇπ: ${node.label || 'Êú™ÂëΩÂêç'}`;
                titleDiv.style.fontWeight = 'bold';
            }
            menu.style.display = 'block';
            this.positionContextMenu(menu, {x: event.clientX, y: event.clientY});
            input.focus();
            this._state.isMenuVisible = true;
        }
    }

    showEditEdgeLabelInput() {
        if (this._state.contextMenuEdge) {
            this.hideAllContextMenus();
            const menu = document.getElementById('editEdgeLabelInput');
            const input = document.getElementById('editEdgeLabelText');
            const edge = this.graphCore.edges.get(this._state.contextMenuEdge);
            input.value = edge.label || "";
            const titleDiv = menu.querySelector('div:first-child');
            if (titleDiv) {
                const fromNode = this.graphCore.nodes.get(edge.from);
                const toNode = this.graphCore.nodes.get(edge.to);
                titleDiv.textContent = `ÁºñËæëËøûÊé•: ${fromNode.label || fromNode.id} ‚Üí ${toNode.label || toNode.id}`;
                titleDiv.style.fontWeight = 'bold';
            }
            menu.style.display = 'block';
            this.positionContextMenu(menu, {x: event.clientX, y: event.clientY});
            input.focus();
            this._state.isMenuVisible = true;
        }
    }

    positionContextMenu(menu, domPos) {
        let x = domPos.x;
        let y = domPos.y;
        const offset = 10;
        const rect = menu.getBoundingClientRect();
        if (x + rect.width > window.innerWidth) {
            x = window.innerWidth - rect.width - offset;
        }
        if (y + rect.height > window.innerHeight) {
            y = window.innerHeight - rect.height - offset;
        }
        if (x < offset) x = offset;
        if (y < offset) y = offset;
        menu.style.left = x + 'px';
        menu.style.top = y + 'px';
    }

    hideAllContextMenus() {
        const menus = document.querySelectorAll('.context-menu, .input-menu');
        menus.forEach(menu => {
            menu.style.display = 'none';
            const titleElements = menu.querySelectorAll('.menu-title');
            titleElements.forEach(el => el.remove());
        });
        if (this._state.menuShowTimer) {
            clearTimeout(this._state.menuShowTimer);
            this._state.menuShowTimer = null;
        }
        this._state.isMenuVisible = false;
    }

    // --- ËæìÂÖ•Á°ÆËÆ§ÂáΩÊï∞ ---
    confirmCreateNode() {
        const input = document.getElementById('newNodeLabel');
        const label = input.value || "Êñ∞ËäÇÁÇπ";
        const newNodeId = 'node_' + Date.now();

        if (this._state.contextMenuNode && this._state.isConnectingNewNode) {
            const nodePos = this.graphCore.network.getPositions([this._state.contextMenuNode])[this._state.contextMenuNode];
            this.graphCore.nodes.add({
                id: newNodeId,
                label: label,
                x: nodePos.x + 100,
                y: nodePos.y + 100
            });
            this.graphCore.edges.add({
                from: this._state.contextMenuNode,
                to: newNodeId
            });
            this.logDebug(`‰ªéËäÇÁÇπ ${this._state.contextMenuNode} ÂàõÂª∫Âπ∂ËøûÊé•Êñ∞ËäÇÁÇπ: ${newNodeId}`);
        } else if (this._state.addingNode) {
            const pos = this.graphCore.network.canvasToDOM({x: 0, y: 0});
            this.graphCore.nodes.add({
                id: newNodeId,
                label: label,
                x: pos.x,
                y: pos.y
            });
            this.logDebug(`ÂàõÂª∫Êñ∞ËäÇÁÇπ: ${newNodeId}`);
        }

        this._state.isConnectingNewNode = false;
        this.hideAllContextMenus();
    }

    confirmEditNodeLabel() {
        if (this._state.contextMenuNode) {
            const input = document.getElementById('editNodeLabelText');
            const newLabel = input.value || "Êú™ÂëΩÂêçËäÇÁÇπ";
            this.graphCore.nodes.update({ id: this._state.contextMenuNode, label: newLabel });
            this.logDebug(`ÁºñËæëËäÇÁÇπÊ†áÁ≠æ: ${this._state.contextMenuNode} -> ${newLabel}`);
            this.hideAllContextMenus();
        }
    }

    confirmEditEdgeLabel() {
        if (this._state.contextMenuEdge) {
            const input = document.getElementById('editEdgeLabelText');
            const newLabel = input.value || "";
            this.graphCore.edges.update({ id: this._state.contextMenuEdge, label: newLabel });
            this.logDebug(`ÁºñËæëËæπÊ†áÁ≠æ: ${this._state.contextMenuEdge} -> "${newLabel}"`);
            this.hideAllContextMenus();
        }
    }

    cancelInput() {
        this.hideAllContextMenus();
    }

    // --- ËäÇÁÇπËèúÂçïÊìç‰Ωú ---
    deleteSelectedNode() {
        if (this._state.contextMenuNode) {
            const connectedEdges = this.graphCore.network.getConnectedEdges(this._state.contextMenuNode);
            this.graphCore.edges.remove(connectedEdges);
            this.graphCore.nodes.remove(this._state.contextMenuNode);
            this.logDebug(`Âà†Èô§ËäÇÁÇπ: ${this._state.contextMenuNode}`);
            this.hideAllContextMenus();
        }
    }

    connectToExistingNodeMode() {
        if (this._state.contextMenuNode) {
            this._state.connectingToExisting = true;
            this._state.connectionSourceNode = this._state.contextMenuNode;
            this.logDebug(`ËøûÊé•Ê®°Âºè: ËØ∑ÁÇπÂáªÁõÆÊ†áËäÇÁÇπ‰ª•ËøûÊé•Âà∞ ${this._state.contextMenuNode}`);
            this.hideAllContextMenus();
        }
    }

    // --- ËæπËèúÂçïÊìç‰Ωú ---
    deleteSelectedEdge() {
        if (this._state.contextMenuEdge) {
            this.graphCore.edges.remove(this._state.contextMenuEdge);
            this.logDebug(`Âà†Èô§Ëæπ: ${this._state.contextMenuEdge}`);
            this.hideAllContextMenus();
        }
    }

    reverseEdgeDirection() {
        if (this._state.contextMenuEdge) {
            const edge = this.graphCore.edges.get(this._state.contextMenuEdge);
            this.graphCore.edges.remove(this._state.contextMenuEdge);
            this.graphCore.edges.add({
                id: this._state.contextMenuEdge,
                from: edge.to,
                to: edge.from,
                label: edge.label
            });
            this.logDebug(`ÂèçËΩ¨ËæπÊñπÂêë: ${edge.to} -> ${edge.from}`);
            this.hideAllContextMenus();
        }
    }

    cancelMode() {
        this._state.addingNode = false;
        this._state.connectingToExisting = false;
        this._state.connectionSourceNode = null;
        this.logDebug("Â∑≤ÂèñÊ∂àÊâÄÊúâÊ®°Âºè");
        this.hideAllContextMenus();
    }

    addNodeMode() {
        this._state.addingNode = true;
        this.logDebug("ËøõÂÖ•Ê∑ªÂä†ËäÇÁÇπÊ®°ÂºèÔºåËØ∑ÁÇπÂáªÁîªÂ∏ÉÊ∑ªÂä†ËäÇÁÇπ");
    }

    logDebug(message) {
        const debugInfo = document.getElementById('debug-info');
        if (debugInfo) {
            debugInfo.textContent = message;
        }
    }

    // --- ÂÖ¨ÂÖ±Êé•Âè£ ---
    get state() {
        return this._state;
    }
}

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÊó∂ÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', async function() {
    // ÂàùÂßãÂåñÊ†∏ÂøÉÊ®°Âùó
    const graphCore = GraphCore;

    // ÂàùÂßãÂåñUIÊ®°Âùó
    const graphUI = new GraphUI(graphCore);

    // ‰ªé URL Ëé∑Âèñ cache_key
    const urlParams = new URLSearchParams(window.location.search);
    const cacheKey = urlParams.get('cache_key');

    if (cacheKey) {
        try {
            await graphCore.loadGraphData(cacheKey);
            console.log('ÂõæË∞±Êï∞ÊçÆÂä†ËΩΩÂÆåÊàê');

            // ÁªëÂÆöÁΩëÁªúÂõæÁöÑUI‰∫ã‰ª∂
            if (graphCore.network) {
                graphCore.network.on("click", (params) => graphUI.handleClick(params));
                graphCore.network.on("doubleClick", (params) => graphUI.handleDoubleClick(params));
                graphCore.network.on("oncontext", (params) => graphUI.handleContextMenu(params));
                graphCore.network.on("hold", (params) => graphUI.handleHold(params));
                graphCore.network.on("release", (params) => graphUI.handleRelease(params));
            }
        } catch (error) {
            console.error('ÂõæË∞±Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•:', error);
        }
    } else {
        const container = document.getElementById('mynetwork');
        if (container) {
            container.innerHTML = `<div style="text-align: center; padding: 50px; color: #aaa; font-family: sans-serif;">
                ËØ∑Âú® URL ‰∏≠Êèê‰æõ cache_key ÂèÇÊï∞Âä†ËΩΩÂõæË∞±Ôºå‰æãÂ¶ÇÔºö<br>
                ?cache_key=your_cache_key_here
            </div>`;
        }
    }

    // Â∞ÜUIÂÆû‰æãÊö¥Èú≤Âà∞ÂÖ®Â±ÄÔºå‰ª•‰æøÂú®HTMLÁöÑÂÜÖËÅîonclick‰∏≠Ë∞ÉÁî®
    window.GraphUI = graphUI;
});